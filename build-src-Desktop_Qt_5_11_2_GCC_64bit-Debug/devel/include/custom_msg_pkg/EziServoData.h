// Generated by gencpp from file custom_msg_pkg/EziServoData.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG_PKG_MESSAGE_EZISERVODATA_H
#define CUSTOM_MSG_PKG_MESSAGE_EZISERVODATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <custom_msg_pkg/EziServoStatus.h>
#include <custom_msg_pkg/EziServoActualMotion.h>

namespace custom_msg_pkg
{
template <class ContainerAllocator>
struct EziServoData_
{
  typedef EziServoData_<ContainerAllocator> Type;

  EziServoData_()
    : ipAddress()
    , status()
    , actualMotion()  {
    }
  EziServoData_(const ContainerAllocator& _alloc)
    : ipAddress(_alloc)
    , status(_alloc)
    , actualMotion(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ipAddress_type;
  _ipAddress_type ipAddress;

   typedef  ::custom_msg_pkg::EziServoStatus_<ContainerAllocator>  _status_type;
  _status_type status;

   typedef  ::custom_msg_pkg::EziServoActualMotion_<ContainerAllocator>  _actualMotion_type;
  _actualMotion_type actualMotion;





  typedef boost::shared_ptr< ::custom_msg_pkg::EziServoData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg_pkg::EziServoData_<ContainerAllocator> const> ConstPtr;

}; // struct EziServoData_

typedef ::custom_msg_pkg::EziServoData_<std::allocator<void> > EziServoData;

typedef boost::shared_ptr< ::custom_msg_pkg::EziServoData > EziServoDataPtr;
typedef boost::shared_ptr< ::custom_msg_pkg::EziServoData const> EziServoDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg_pkg::EziServoData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg_pkg::EziServoData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace custom_msg_pkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'custom_msg_pkg': ['/home/michal/catkin_ws/src/custom_msg_pkg/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg_pkg::EziServoData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg_pkg::EziServoData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg_pkg::EziServoData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg_pkg::EziServoData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg_pkg::EziServoData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg_pkg::EziServoData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg_pkg::EziServoData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "70843f32172de7329088dc42b06b7545";
  }

  static const char* value(const ::custom_msg_pkg::EziServoData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x70843f32172de732ULL;
  static const uint64_t static_value2 = 0x9088dc42b06b7545ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg_pkg::EziServoData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg_pkg/EziServoData";
  }

  static const char* value(const ::custom_msg_pkg::EziServoData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg_pkg::EziServoData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string ipAddress\n\
EziServoStatus status\n\
EziServoActualMotion actualMotion\n\
\n\
\n\
================================================================================\n\
MSG: custom_msg_pkg/EziServoStatus\n\
bool connected\n\
bool enabled\n\
bool alarm\n\
bool emergency\n\
bool stopping \n\
bool moving\n\
\n\
\n\
\n\
================================================================================\n\
MSG: custom_msg_pkg/EziServoActualMotion\n\
int32 position\n\
int32 velocity\n\
int8 direction\n\
int32 positionError\n\
\n\
";
  }

  static const char* value(const ::custom_msg_pkg::EziServoData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg_pkg::EziServoData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ipAddress);
      stream.next(m.status);
      stream.next(m.actualMotion);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EziServoData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg_pkg::EziServoData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg_pkg::EziServoData_<ContainerAllocator>& v)
  {
    s << indent << "ipAddress: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ipAddress);
    s << indent << "status: ";
    s << std::endl;
    Printer< ::custom_msg_pkg::EziServoStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.status);
    s << indent << "actualMotion: ";
    s << std::endl;
    Printer< ::custom_msg_pkg::EziServoActualMotion_<ContainerAllocator> >::stream(s, indent + "  ", v.actualMotion);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG_PKG_MESSAGE_EZISERVODATA_H
