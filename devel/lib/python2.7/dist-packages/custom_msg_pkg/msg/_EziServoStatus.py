# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from custom_msg_pkg/EziServoStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class EziServoStatus(genpy.Message):
  _md5sum = "f22805727de3ca4b7981acde30ca7355"
  _type = "custom_msg_pkg/EziServoStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool connected
bool enabled
bool alarm
bool emergency
bool stopping 
bool moving


"""
  __slots__ = ['connected','enabled','alarm','emergency','stopping','moving']
  _slot_types = ['bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       connected,enabled,alarm,emergency,stopping,moving

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EziServoStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.connected is None:
        self.connected = False
      if self.enabled is None:
        self.enabled = False
      if self.alarm is None:
        self.alarm = False
      if self.emergency is None:
        self.emergency = False
      if self.stopping is None:
        self.stopping = False
      if self.moving is None:
        self.moving = False
    else:
      self.connected = False
      self.enabled = False
      self.alarm = False
      self.emergency = False
      self.stopping = False
      self.moving = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.connected, _x.enabled, _x.alarm, _x.emergency, _x.stopping, _x.moving))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.connected, _x.enabled, _x.alarm, _x.emergency, _x.stopping, _x.moving,) = _get_struct_6B().unpack(str[start:end])
      self.connected = bool(self.connected)
      self.enabled = bool(self.enabled)
      self.alarm = bool(self.alarm)
      self.emergency = bool(self.emergency)
      self.stopping = bool(self.stopping)
      self.moving = bool(self.moving)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6B().pack(_x.connected, _x.enabled, _x.alarm, _x.emergency, _x.stopping, _x.moving))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.connected, _x.enabled, _x.alarm, _x.emergency, _x.stopping, _x.moving,) = _get_struct_6B().unpack(str[start:end])
      self.connected = bool(self.connected)
      self.enabled = bool(self.enabled)
      self.alarm = bool(self.alarm)
      self.emergency = bool(self.emergency)
      self.stopping = bool(self.stopping)
      self.moving = bool(self.moving)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B
