# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from custom_msg_pkg/EziServosData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import custom_msg_pkg.msg

class EziServosData(genpy.Message):
  _md5sum = "a1386091f448a56ae9b0d394c1619d91"
  _type = "custom_msg_pkg/EziServosData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """EziServoData[] eziServoData

================================================================================
MSG: custom_msg_pkg/EziServoData
string ipAddress
EziServoStatus status
EziServoActualMotion actualMotion


================================================================================
MSG: custom_msg_pkg/EziServoStatus
bool connected
bool enabled
bool alarm
bool emergency
bool stopping 
bool moving



================================================================================
MSG: custom_msg_pkg/EziServoActualMotion
int32 position
int32 velocity
int8 direction
int32 positionError

"""
  __slots__ = ['eziServoData']
  _slot_types = ['custom_msg_pkg/EziServoData[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       eziServoData

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EziServosData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.eziServoData is None:
        self.eziServoData = []
    else:
      self.eziServoData = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.eziServoData)
      buff.write(_struct_I.pack(length))
      for val1 in self.eziServoData:
        _x = val1.ipAddress
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v1 = val1.status
        _x = _v1
        buff.write(_get_struct_6B().pack(_x.connected, _x.enabled, _x.alarm, _x.emergency, _x.stopping, _x.moving))
        _v2 = val1.actualMotion
        _x = _v2
        buff.write(_get_struct_2ibi().pack(_x.position, _x.velocity, _x.direction, _x.positionError))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.eziServoData is None:
        self.eziServoData = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.eziServoData = []
      for i in range(0, length):
        val1 = custom_msg_pkg.msg.EziServoData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.ipAddress = str[start:end].decode('utf-8')
        else:
          val1.ipAddress = str[start:end]
        _v3 = val1.status
        _x = _v3
        start = end
        end += 6
        (_x.connected, _x.enabled, _x.alarm, _x.emergency, _x.stopping, _x.moving,) = _get_struct_6B().unpack(str[start:end])
        _v3.connected = bool(_v3.connected)
        _v3.enabled = bool(_v3.enabled)
        _v3.alarm = bool(_v3.alarm)
        _v3.emergency = bool(_v3.emergency)
        _v3.stopping = bool(_v3.stopping)
        _v3.moving = bool(_v3.moving)
        _v4 = val1.actualMotion
        _x = _v4
        start = end
        end += 13
        (_x.position, _x.velocity, _x.direction, _x.positionError,) = _get_struct_2ibi().unpack(str[start:end])
        self.eziServoData.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.eziServoData)
      buff.write(_struct_I.pack(length))
      for val1 in self.eziServoData:
        _x = val1.ipAddress
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v5 = val1.status
        _x = _v5
        buff.write(_get_struct_6B().pack(_x.connected, _x.enabled, _x.alarm, _x.emergency, _x.stopping, _x.moving))
        _v6 = val1.actualMotion
        _x = _v6
        buff.write(_get_struct_2ibi().pack(_x.position, _x.velocity, _x.direction, _x.positionError))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.eziServoData is None:
        self.eziServoData = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.eziServoData = []
      for i in range(0, length):
        val1 = custom_msg_pkg.msg.EziServoData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.ipAddress = str[start:end].decode('utf-8')
        else:
          val1.ipAddress = str[start:end]
        _v7 = val1.status
        _x = _v7
        start = end
        end += 6
        (_x.connected, _x.enabled, _x.alarm, _x.emergency, _x.stopping, _x.moving,) = _get_struct_6B().unpack(str[start:end])
        _v7.connected = bool(_v7.connected)
        _v7.enabled = bool(_v7.enabled)
        _v7.alarm = bool(_v7.alarm)
        _v7.emergency = bool(_v7.emergency)
        _v7.stopping = bool(_v7.stopping)
        _v7.moving = bool(_v7.moving)
        _v8 = val1.actualMotion
        _x = _v8
        start = end
        end += 13
        (_x.position, _x.velocity, _x.direction, _x.positionError,) = _get_struct_2ibi().unpack(str[start:end])
        self.eziServoData.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2ibi = None
def _get_struct_2ibi():
    global _struct_2ibi
    if _struct_2ibi is None:
        _struct_2ibi = struct.Struct("<2ibi")
    return _struct_2ibi
_struct_6B = None
def _get_struct_6B():
    global _struct_6B
    if _struct_6B is None:
        _struct_6B = struct.Struct("<6B")
    return _struct_6B
